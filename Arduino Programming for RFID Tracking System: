#include <SPI.h>
#include <MFRC522.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <WiFiClientSecureBearSSL.h>
#define RST_PIN D3
#define SS_PIN D4
#define BUZZER D2
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
MFRC522::StatusCode status;
int blockNum = 2;
byte bufferLen = 18;
byte readBlockData[18];
String card_holder_name;
const String sheet_url =
"https://script.google.com/macros/s/AKfycbztRSx9RTmkBlXE86BEP8o9h7wr6Crz0lt6ON0_49xOxfgBm5zxCZZdE-j4k5dR9oTag/exec?name=";
const uint8_t fingerprint[20] = {0xAC, 0xC1, 0x30, 0x63, 0x91, 0x6B, 0xDC,
0x79, 0xD3, 0xC8, 0x51, 0x9E, 0x9A, 0xE7, 0x8F, 0xEF, 0xDC, 0xA6, 0xC5, 0xC6};
#define WIFI_SSID "Srijit2.4"
#define WIFI_PASSWORD "9434978002"
void setup()
{
Serial.begin(9600);
Serial.println();
Serial.print("Connecting to AP");
WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
while (WiFi.status() != WL_CONNECTED){
Serial.print(".");
delay(200);
}
Serial.println("");
Serial.println("WiFi connected.");
Serial.println("IP address: ");
Serial.println(WiFi.localIP());
Serial.println();
pinMode(BUZZER, OUTPUT);
SPI.begin();
}
void loop()
{
mfrc522.PCD_Init();
if (! mfrc522.PICC_IsNewCardPresent()) {return;}
if (! mfrc522.PICC_ReadCardSerial()) {return;}
Serial.println();
Serial.println(F("Reading last data from RFID..."));
ReadDataFromBlock(blockNum, readBlockData);
Serial.println();
Serial.print(F("Last data in RFID:"));
Serial.print(blockNum);
Serial.print(F(" --> "));
for (int j=0 ; j<16 ; j++)
{
Serial.write(readBlockData[j]);
}
Serial.println();
digitalWrite(BUZZER, HIGH);
delay(200);
digitalWrite(BUZZER, LOW);
delay(200);
digitalWrite(BUZZER, HIGH);
delay(200);
digitalWrite(BUZZER, LOW);
if (WiFi.status() == WL_CONNECTED) {
std::unique_ptr<BearSSL::WiFiClientSecure>client(new
BearSSL::WiFiClientSecure);
client->setFingerprint(fingerprint);
card_holder_name = sheet_url + String((char*)readBlockData);
card_holder_name.trim();
Serial.println(card_holder_name);
HTTPClient https;
Serial.print(F("[HTTPS] begin...\n"));
if (https.begin(*client, (String)card_holder_name)){
// HTTP
Serial.print(F("[HTTPS] GET...\n"));
// start connection and send HTTP header
int httpCode = https.GET();
// httpCode will be negative on error
if (httpCode > 0) {
// HTTP header has been send and Server response header has been
handled
}
Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
// file found at server
else
{Serial.printf("[HTTPS] GET... failed, error: %s\n",
https.errorToString(httpCode).c_str());}
https.end();
delay(1000);
}
else {
Serial.printf("[HTTPS} Unable to connect\n");
}
}
}
void ReadDataFromBlock(int blockNum, byte readBlockData[])
{
for (byte i = 0; i < 6; i++) {
key.keyByte[i] = 0xFF;
}
/* Authenticating the desired data block for Read access using Key A */
status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum,
&key, &(mfrc522.uid));
if (status != MFRC522::STATUS_OK){
Serial.print("Authentication failed for Read: ");
Serial.println(mfrc522.GetStatusCodeName(status));
return;
}
else {
Serial.println("Authentication success");
}
/* Reading data from the Block */
status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
if (status != MFRC522::STATUS_OK) {
Serial.print("Reading failed: ");
Serial.println(mfrc522.GetStatusCodeName(status));
return;
}
else {
Serial.println("Block was read successfully");
}
}
